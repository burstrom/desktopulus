# GNU Make project makefile autogenerated by Premake

ifndef config
  config=linux32_debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),linux32_debug)
  CXX = /home/ashana/Uni/M7012E/minko/dev//tool/lin/script/g++.sh
  RESCOMP = windres
  TARGETDIR = bin/linux32/debug
  TARGET = $(TARGETDIR)/testomatic
  OBJDIR = obj/linux32/debug
  DEFINES += -DDEBUG -DMINKO_PLUGIN_SDL -DMINKO_PLUGIN_PNG
  INCLUDES += -I../../minko/dev/framework/include -Isrc -I../../minko/dev/plugin/sdl/include -I../../minko/dev/plugin/sdl/lib/sdl/include -I../../minko/dev/plugin/png/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCH) -g -m32
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CFLAGS) -MMD -MP -std=c++11
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += -lminko-framework -lGL -lm -lminko-plugin-sdl -lSDL2 -lminko-plugin-png
  LDDEPS +=
  ALL_LDFLAGS += $(LDFLAGS) -m32 -L/usr/lib32 -L../../minko/dev/framework/bin/linux32/debug -L../../minko/dev/plugin/sdl/bin/linux32/debug -L../../minko/dev/plugin/png/bin/linux32/debug -Wl,--no-as-needed
  LINKCMD = $(CXX) -o $(TARGET) $(OBJECTS) $(RESOURCES) $(ARCH) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
	@echo Running pre-link commands
	test -e /home/ashana/Uni/M7012E/minko/dev/framework/asset && cp -R /home/ashana/Uni/M7012E/minko/dev/framework/asset "${TARGETDIR}" || :
  endef
  define POSTBUILDCMDS
  endef
all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),linux64_debug)
  CXX = /home/ashana/Uni/M7012E/minko/dev//tool/lin/script/g++.sh
  RESCOMP = windres
  TARGETDIR = bin/linux64/debug
  TARGET = $(TARGETDIR)/testomatic
  OBJDIR = obj/linux64/debug
  DEFINES += -DDEBUG -DMINKO_PLUGIN_SDL -DMINKO_PLUGIN_PNG
  INCLUDES += -I../../minko/dev/framework/include -Isrc -I../../minko/dev/plugin/sdl/include -I../../minko/dev/plugin/sdl/lib/sdl/include -I../../minko/dev/plugin/png/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCH) -g -m64
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CFLAGS) -MMD -MP -std=c++11
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += -lminko-framework -lGL -lm -lminko-plugin-sdl -lSDL2 -lminko-plugin-png
  LDDEPS +=
  ALL_LDFLAGS += $(LDFLAGS) -m64 -L/usr/lib64 -L../../minko/dev/framework/bin/linux64/debug -L../../minko/dev/plugin/sdl/bin/linux64/debug -L../../minko/dev/plugin/png/bin/linux64/debug -Wl,--no-as-needed
  LINKCMD = $(CXX) -o $(TARGET) $(OBJECTS) $(RESOURCES) $(ARCH) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
	@echo Running pre-link commands
	test -e /home/ashana/Uni/M7012E/minko/dev/framework/asset && cp -R /home/ashana/Uni/M7012E/minko/dev/framework/asset "${TARGETDIR}" || :
  endef
  define POSTBUILDCMDS
  endef
all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),linux32_release)
  CXX = /home/ashana/Uni/M7012E/minko/dev//tool/lin/script/g++.sh
  RESCOMP = windres
  TARGETDIR = bin/linux32/release
  TARGET = $(TARGETDIR)/testomatic
  OBJDIR = obj/linux32/release
  DEFINES += -DNDEBUG -DMINKO_PLUGIN_SDL -DMINKO_PLUGIN_PNG
  INCLUDES += -I../../minko/dev/framework/include -Isrc -I../../minko/dev/plugin/sdl/include -I../../minko/dev/plugin/sdl/lib/sdl/include -I../../minko/dev/plugin/png/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCH) -m32 -O2
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CFLAGS) -MMD -MP -std=c++11
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += -lminko-framework -lGL -lm -lminko-plugin-sdl -lSDL2 -lminko-plugin-png
  LDDEPS +=
  ALL_LDFLAGS += $(LDFLAGS) -s -m32 -L/usr/lib32 -L../../minko/dev/framework/bin/linux32/release -L../../minko/dev/plugin/sdl/bin/linux32/release -L../../minko/dev/plugin/png/bin/linux32/release -Wl,--no-as-needed
  LINKCMD = $(CXX) -o $(TARGET) $(OBJECTS) $(RESOURCES) $(ARCH) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
	@echo Running pre-link commands
	test -e /home/ashana/Uni/M7012E/minko/dev/framework/asset && cp -R /home/ashana/Uni/M7012E/minko/dev/framework/asset "${TARGETDIR}" || :
	test -e asset && cp -R asset "${TARGETDIR}" || :
  endef
  define POSTBUILDCMDS
  endef
all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),linux64_release)
  CXX = /home/ashana/Uni/M7012E/minko/dev//tool/lin/script/g++.sh
  RESCOMP = windres
  TARGETDIR = bin/linux64/release
  TARGET = $(TARGETDIR)/testomatic
  OBJDIR = obj/linux64/release
  DEFINES += -DNDEBUG -DMINKO_PLUGIN_SDL -DMINKO_PLUGIN_PNG
  INCLUDES += -I../../minko/dev/framework/include -Isrc -I../../minko/dev/plugin/sdl/include -I../../minko/dev/plugin/sdl/lib/sdl/include -I../../minko/dev/plugin/png/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCH) -m64 -O2
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CFLAGS) -MMD -MP -std=c++11
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += -lminko-framework -lGL -lm -lminko-plugin-sdl -lSDL2 -lminko-plugin-png
  LDDEPS +=
  ALL_LDFLAGS += $(LDFLAGS) -s -m64 -L/usr/lib64 -L../../minko/dev/framework/bin/linux64/release -L../../minko/dev/plugin/sdl/bin/linux64/release -L../../minko/dev/plugin/png/bin/linux64/release -Wl,--no-as-needed
  LINKCMD = $(CXX) -o $(TARGET) $(OBJECTS) $(RESOURCES) $(ARCH) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
	@echo Running pre-link commands
	test -e /home/ashana/Uni/M7012E/minko/dev/framework/asset && cp -R /home/ashana/Uni/M7012E/minko/dev/framework/asset "${TARGETDIR}" || :
	test -e asset && cp -R asset "${TARGETDIR}" || :
  endef
  define POSTBUILDCMDS
  endef
all: $(TARGETDIR) $(OBJDIR) prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/main.o \

RESOURCES := \

SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

$(TARGET): $(GCH) $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking testomatic
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning testomatic
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(GCH): $(PCH)
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -MMD -MP $(DEFINES) $(INCLUDES) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
endif

$(OBJDIR)/main.o: src/main.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF $(@:%.o=%.d) -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif
